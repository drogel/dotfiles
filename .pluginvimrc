" ======= Vim plugins settings =======
"
"

call plug#begin('~/.vim/plugged')

" Nodejs extension host for vim & neovim, load extensions like VSCode and host
" language servers. Used for features like code completion and jump to
" definition in code.
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Fzf.vim is a vim plugin based on the command line fuzzy finder fzf. Used to
" navigate quickly between files in a project, and finding stuff in code.
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Vim-autoformat provides easy code formatting in Vim by integrating existing
" code formatters.
Plug 'Chiel92/vim-autoformat'

" Vim-fugitive is a git wrapper for vim.
Plug 'tpope/vim-fugitive'

" Status bar for vim.
Plug 'vim-airline/vim-airline'

call plug#end()

" ======= Swift indent script settings =======
"
"

" Sets the indentation value to 4 spaces when inserting after a brace in Swift.
let g:swiftIndentAfterBrace = 4

" ======= CoC mappings =======
"
"

" Use `[g` and `]g` to navigate through CoC diagnostics.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Different go-to navigations using CoC.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gc <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" ======= Vim-autoformat configuration =======
"
"

" Declares the formatters that the vim-autoformat plugin shuold use for
" formatting Swift files, and tells the plugin how to use de binaries to
" format Swift code.
let g:formatters_swift = ['apple_swiftformat', 'swiftformat']
let g:formatdef_apple_swiftformat = '"apple_swiftformat -"'
let g:formatdef_swiftformat = '"cat - | swiftformat --quiet stdin"'

" Autoformats the current buffer.
nnoremap <silent> <leader>l :Autoformat<CR>

" ======= Fugitive mappings =======
"
"

" Shows fugitive git status menu.
nnoremap <silent> <leader>gs :G<CR>

" Shows current git diff.
nnoremap <silent> <leader>gd :Git diff<CR>

" Shows diff between the current state and the last commit.
nnoremap <silent> <leader>gp :Git diff HEAD~1<CR>

" Shows git log.
nnoremap <silent> <leader>gl :Git log<CR>

" Pick the left side patch in a merge conflict.
nnoremap <silent> <leader>gf :diffget //2<CR>

" Pick the right side patch in a merge conflict.
nnoremap <silent> <leader>gj :diffget //3<CR>

" ======= FzF mappings =======
"
"

" Configures Vim to use ripgrep instead of terminal grep when running the
" :grep command. Of course, ripgrep is required for this to work.
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Find files with fzf.vim.
nnoremap <silent> <leader>f :Files<CR>

" Find ocurrences in code with fzf.vim and ripgrep.
nnoremap <silent> <leader>F :Rg<CR>

" Find within all the buffers.
nnoremap <silent> <Leader>B :Buffers<CR>

" Find lines in the current buffer.
nnoremap <silent> <Leader>/ :BLines<CR>

" Find within the marks of the current session.
nnoremap <silent> <Leader>' :Marks<CR>

" Find within the git commits of the current git project.
nnoremap <silent> <Leader>cm :Commits<CR>

" Find in the shell history.
nnoremap <silent> <Leader>hh :History<CR>

" Find in the vim command mode history.
nnoremap <silent> <Leader>h: :History:<CR>

" Find in the vim search history.
nnoremap <silent> <Leader>h/ :History/<CR>

" ======= Airline configuration =======
"
"

" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1
