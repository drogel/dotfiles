" ======= Vim plugins settings =======
"
"

" Automatically downloads the vim-plug plugin manager if it's not already in
" the system.
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
	silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Nodejs extension host for vim & neovim, load extensions like VSCode and host
" language servers. Used for features like code completion and jump to
" definition in code.
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Fzf.vim is a vim plugin based on the command line fuzzy finder fzf. Used to
" navigate quickly between files in a project, and finding stuff in code.
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }

" Vim-autoformat provides easy code formatting in Vim by integrating existing
" code formatters.
Plug 'Chiel92/vim-autoformat'

" Vim-fugitive is a git wrapper for vim.
Plug 'tpope/vim-fugitive'

" Status bar for vim.
Plug 'vim-airline/vim-airline'

" Provides lots of handy pairs of bracket-based mappings.
Plug 'tpope/vim-unimpaired'

" Provides fuzzy incremental search within buffers.
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'

" Modifies " and @ in normal mode, and <C-r> in insert mode, to show a quick
" preview of the registers.
Plug 'junegunn/vim-peekaboo'

" Shows git markers in the signcolumn and adds mapps to stage, undo or
" navigate hunks.
Plug 'airblade/vim-gitgutter'

" Utils for writing brackets, braces and parentheses, such as auto-closing
" and auto-indenting pairs.
Plug 'jiangmiao/auto-pairs'

" Dart language support for vim, with features such as filetype detection,
" syntax highlighting and formatting.
Plug 'dart-lang/dart-vim-plugin'

" File system explorer for Vim.
Plug 'preservim/nerdtree'

call plug#end()

" ======= Swift indent script settings =======
"
"

" Sets the indentation value to 4 spaces when inserting after a brace in Swift.
let g:swiftIndentAfterBrace = 4

" ======= CoC mappings =======
"
"

" Declare the CoC global extensions that we want to use. In this case,
" sourcekit for Swift LSP support and Flutter for Dart+Flutter LSP support.
let g:coc_global_extensions = [
			\ 'coc-flutter',
			\ 'coc-sourcekit',
			\ 'coc-json',
			\ 'coc-yaml',
			\ ]

" Use `[g` and `]g` to navigate through CoC diagnostics.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Different go-to navigations using CoC.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gc <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on <CR>.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
			\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Apply a CoC code action on the selected region, for example: `<leader>aap`
" for current paragraph.
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" ======= Vim-autoformat configuration =======
"
"

" Declares the formatters that the vim-autoformat plugin should use for
" formatting Swift files, and tells the plugin how to use the binaries to
" format Swift code. (A single dash `-` will expand the path to the current
" file).
let g:formatters_swift = ['apple_swiftformat', 'swiftformat']
let g:formatdef_apple_swiftformat = '"apple_swiftformat -"'
let g:formatdef_swiftformat = '"cat - | swiftformat --quiet stdin"'

" Autoformats the current buffer.
autocmd FileType swift nnoremap <silent> <leader>l :Autoformat<CR>

" ======= Fugitive mappings =======
"
"

" Sets git diff merge conflict resolution view vertical by default.
set diffopt+=vertical

" Opens diff merge conflict resolution split view.
nnoremap <silent> <leader>gdv :Gdiffsplit!

" Shows fugitive git status menu.
nnoremap <silent> <leader>gs :G<CR>

" Shows current git diff.
nnoremap <silent> <leader>gd :Git diff<CR>

" Shows diff between the current state and the last commit.
nnoremap <silent> <leader>gp :Git diff HEAD~1<CR>

" Shows git log.
nnoremap <silent> <leader>gl :Git log<CR>

" Pick the left side patch in a merge conflict.
nnoremap <silent> <leader>gf :diffget //2<CR>

" Pick the right side patch in a merge conflict.
nnoremap <silent> <leader>gj :diffget //3<CR>

" ======= FzF mappings =======
"
"

" Makes fzf show its preview window on the upper side of the window, occupying
" the 80% of the window. Pressing <C-/> will toggle the preview window.
let g:fzf_preview_window = ['up:80%', 'ctrl-/']

" Configures Vim to use ripgrep instead of terminal grep when running the
" :grep command. Of course, ripgrep is required for this to work.
set grepprg=rg\ --vimgrep\ --smart-case\ --follow

" Find files with fzf.vim.
nnoremap <silent> <leader>f :Files<CR>

" Find occurrences in code with fzf.vim and ripgrep.
nnoremap <silent> <leader>F :Rg<CR>

" Find within all the buffers.
nnoremap <silent> <Leader>B :Buffers<CR>

" Find lines in the current buffer.
nnoremap <silent> <Leader>/ :BLines<CR>

" Find within the marks of the current session.
nnoremap <silent> <Leader>' :Marks<CR>

" Find within the git commits of the current git project.
nnoremap <silent> <Leader>cm :Commits<CR>

" Find in the shell history.
nnoremap <silent> <Leader>hh :History<CR>

" Find in the vim command mode history.
nnoremap <silent> <Leader>h: :History:<CR>

" Find in the vim search history.
nnoremap <silent> <Leader>h/ :History/<CR>

" Create a command called FindWordUnderCursor that uses fzf.vim and ripgrep to
" find occurrences of the word under the cursor in code.
command! -bang -nargs=* FindWordUnderCursor
			\ call fzf#vim#grep(
			\   'rg --column --line-number --no-heading --color=always '.shellescape(expand('<cword>')),
			\ 1,
			\ fzf#vim#with_preview('up:80%')
			\   )

" Create a command called FindWORDUnderCursor that uses fzf.vim and ripgrep to
" find occurrences of the WORD under the cursor in code.
command! -bang -nargs=* FindWORDUnderCursor
			\ call fzf#vim#grep(
			\   'rg --column --line-number --no-heading --color=always '.shellescape(expand('<cWORD>')),
			\ 1,
			\ fzf#vim#with_preview('up:80%')
			\   )

" Find occurrences of the word under the cursor in code with ripgrep.
nnoremap <silent> <leader>s :FindWordUnderCursor<CR>

" Find occurrences of the WORD under the cursor in code with ripgrep.
nnoremap <silent> <leader>S :FindWORDUnderCursor<CR>

" ======= Airline configuration =======
"
"

" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1

" ======= Incsearch-fuzzy mappings =======
"
"

" Turns 'hlsearch' off automatically after searching related motions.
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

" Fuzzy searches forwards, correcting spelling.
nmap <leader><leader> <Plug>(incsearch-fuzzyspell-/)

" ======= GitGutter mappings =======
"
"

" Jumps between gitgutter hunks.
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)


" ======= Dart-vim mappings =======
"
"

" Autoformats the current buffer.
autocmd FileType dart nnoremap <silent> <leader>l :DartFmt<CR>


" ======= NerdTree mappings =======
"
"

" Jumps between gitgutter hunks.
nnoremap <C-j> :NERDTreeFocus<CR>
nnoremap <leader>J :NERDTreeFind<CR>

" Start NERDTree automatically when Vim starts, and put the cursor back in the
" other window.
autocmd VimEnter * NERDTree | wincmd p

" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
